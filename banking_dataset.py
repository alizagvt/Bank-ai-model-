# -*- coding: utf-8 -*-
"""Banking dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jSO5xcr6FVJGBIrTezCQg_kuMiYHMVIM

####Data Exploration
"""

# suppress display of warnings
import warnings
warnings.filterwarnings('ignore')
# panadas is used for data mainpulation and analysis
import pandas as pd
#numpy is used for mathematical operations on large , multi-dimensional arrays and matrices
import numpy as np
#matplotlib is a data visualization library for 2D and 3D plots,built on numpy
import matplotlib.pyplot as plt
import seaborn as sns
#import various functions to perform classification
from sklearn.model_selection  import train_test_split
from sklearn.preprocessing  import LabelEncoder
#classifiction models
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn import metrics

import pandas as pd
df = pd.read_csv('/content/new_train.csv.zip')
df

df.info()

df.describe()

"""#### DATA  CLEANING

"""

df.duplicated().sum()

df.isnull().sum()

df.drop_duplicates(inplace=True)
df

df.duplicated().sum()

df['y'].value_counts()

df['y'].value_counts(normalize=True)

"""####EDA"""

df.y.value_counts().plot(kind="bar")
plt.title("Value counts of the y  variable")
plt.xlabel("y ")
plt.xticks(rotation = 0)
plt.ylabel("Count")
plt.show()

column = ['month','loan','duration',]

for i in range(0,3,1):
  sns.catplot(x= "y", y = column[i], data =df, kind = "box",aspect = 1.5)
  plt.title(f"Box plot with y vs {column[i]}")
  plt.show()

plt.figure(figsize = (20,5))
sns.countplot(x='y', data=df)
plt.xlabel('y')
plt.ylabel('Count')
plt.title('Distribution of y')
plt.show()

le = LabelEncoder()
col = ['age', 'job', 'marital', 'education', 'default', 'housing', 'loan',
       'contact', 'month', 'day_of_week', 'duration', 'campaign', 'pdays',
       'previous', 'poutcome', 'y']

for i in col:
  df[i] = le.fit_transform(df[i])
df

df.corr

df.columns

plt.figure(figsize=(15,15))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap= 'Pastel1')
plt.title('Correlation Matrix of Iris Dataset')
plt.show()

Y = df[['y']]
X = df.drop(columns= ['y'])


from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size =0.80 )
X_test.shape

X_test.head()

X_train.shape

sns.pairplot(df)

models = {
    "                   Logistic Regression": LogisticRegression(),
    "                  Gaussian Naive Bayes": GaussianNB(),
    "                   K-Nearest Neighbors": KNeighborsClassifier(),
    "                Support Vector Machine": SVC(),
    "                          RandomForest": RandomForestClassifier()
}

for name, model in models.items():
    model.fit(X_train, Y_train)
    print(name + " trained.")

for name, model in models.items():
    print(name + ": {:.2f}%".format(model.score(X_test, Y_test) * 100))

"""####MODELLING"""

for name, model in models.items():
  y_pred = model.predict(X_test)
  # PRINT THE CONFUSION MATRIX
  print("Confusion Matrix")
  cm = confusion_matrix(Y_test, y_pred)
  print(cm)
  plt.figure(figsize = (6, 4))
  sns.heatmap(cm, annot = True, fmt = 'd', cmap = 'Blues', cbar = False, annot_kws = {'size' : 14})
  plt.xlabel('Predicted Labels', fontsize = 14)
  plt.ylabel('True Labels', fontsize = 14)
  plt.title(f'Confusion Matrix{name}', fontsize = 16)
  plt.show()

for name, model in models.items():
  y_predicted= model.predict(X_test)
  print(name , "Prediction : ",y_predicted)

"""####OVER SAMPLING

"""

from imblearn.over_sampling import SMOTE
sm = SMOTE(random_state=42)
X_re,Y_re = sm.fit_resample(X,Y)
X_train,X_test,Y_train,Y_test = train_test_split(X_re,Y_re ,test_size=0.25)
X.head()

sns.countplot(x ='y', data = Y)
plt.title('before applying SMOTE')
plt.show()

sns.countplot(x ='y', data = Y_re)
plt.title('After applying SMOTE')

from sklearn.metrics import classification_report
report = classification_report(Y_test, y_pred)
print(report)

models = {
    "                   Logistic Regression": LogisticRegression(),
    "                  Gaussian Naive Bayes": GaussianNB(),
    "                   K-Nearest Neighbors": KNeighborsClassifier(),
    "                Support Vector Machine": SVC(),
    "                          RandomForest": RandomForestClassifier()
}

for name, model in models.items():
    model.fit(X_train, Y_train)
    print(name + " trained.")

for name, model in models.items():
  y_pred = model.predict(X_test)
  # PRINT THE CONFUSION MATRIX
  print("Confusion Matrix")
  cm = confusion_matrix(Y_test, y_pred)
  print(cm)
  plt.figure(figsize = (6, 4))
  sns.heatmap(cm, annot = True, fmt = 'd', cmap = 'Blues', cbar = False, annot_kws = {'size' : 14})
  plt.xlabel('Predicted Labels', fontsize = 14)
  plt.ylabel('True Labels', fontsize = 14)
  plt.title(f'Confusion Matrix{name}', fontsize = 16)
  plt.show()